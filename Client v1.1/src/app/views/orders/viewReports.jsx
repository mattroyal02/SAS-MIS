import { makeStyles } from "@material-ui/core";
import { Box, Button, Card, Icon, Stack, styled } from "@mui/material";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import axios from "axios";
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import "./index.css";

const Title = styled("span")(() => ({
  fontSize: "1.25rem",
  fontWeight: "500",
  marginRight: ".5rem",
  textTransform: "capitalize",
}));

const SubTitle = styled("span")(({ theme }) => ({
  fontSize: "1rem",
  color: theme.palette.text.secondary,
}));

const H4 = styled("h4")(({ theme }) => ({
  fontSize: "1rem",
  fontWeight: "500",
  marginBottom: "16px",
  textTransform: "capitalize",
  color: theme.palette.text.secondary,
}));

const useStyles = makeStyles({
  notchedOutline: {
    borderColor: "white !important",
  },
});

const FlexBox = styled(Box)(() => ({
  display: "flex",
  alignItems: "center",
}));

const CardHeader = styled(Box)(() => ({
  display: "flex",
  paddingLeft: "24px",
  paddingRight: "24px",
  marginBottom: "12px",
  alignItems: "center",
  justifyContent: "space-between",
}));

const ReportsView = () => {
  const [pageSize, setPageSize] = React.useState(10);
  const [selectedCellParams, setSelectedCellParams] = React.useState(null);
  const [cellModesModel, setCellModesModel] = React.useState({});
  //Focus
  const handleCellFocus = React.useCallback((event) => {
    const row = event.currentTarget.parentElement;
    const id = row.dataset.id;
    const field = event.currentTarget.dataset.field;
    setSelectedCellParams({ id, field });
  }, []);
  console.log("selectedCellParams :>> ", selectedCellParams);
  const cellMode = React.useMemo(() => {
    if (!selectedCellParams) {
      return "view";
    }
    const { id, field } = selectedCellParams;
    return cellModesModel[id]?.[field]?.mode || "view";
  }, [cellModesModel, selectedCellParams]);

  //Edit BAR
  const handleCellKeyDown = React.useCallback(
    (params, event) => {
      if (cellMode === "edit") {
        // Prevents calling event.preventDefault() if Tab is pressed on a cell in edit mode
        event.defaultMuiPrevented = true;
      }
    },
    [cellMode]
  );

  const [data, setData] = useState([]);
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(false);

  const [filterObject, setFilterObject] = useState({
    hosts: {},
    reactivities: {},
    mainCategories: {},
    applications: {},
    suppliers: {},
  });
  console.log("Filterobj", filterObject);

  console.log("loading :>> ", loading);

  const getData = async () => {
    const { data } = await axios.get("http://localhost:4050/reports", {
      params: { search },
    });
    // console.log("Hello", data);
    setData(data.data);
  };
  useEffect(() => {
    getData();
  }, []);

  console.log("Products", data);

  const columns = [
    {
      field: "referenceNumber",
      headerName: "Reference #",
      width: 115,
      editable: true,
    },
    {
      field: "shift",
      headerName: "Shift #",
      width: 100,
      editable: true,
    },
    {
      field: "startShiftTime",
      headerName: "Shift Start Time",
      width: 195,
      editable: true,
    },
    {
      field: "endShiftTime",
      headerName: "Shift End Time",
      width: 195,
      editable: true,
    },
    {
      field: "names",
      headerName: "Generated by",
      width: 220,
      editable: true,
    },
    {
      field: "employeeEmail",
      headerName: "Employee Email",
      editable: true,
      width: 200,
    },
    {
      field: "employeeId",
      headerName: "Employee ID",
      editable: true,
      width: 120,
    },
    {
      field: "phoneNumber",
      headerName: "Contact Number",
      width: 175,
      editable: true,
    },

    {
      field: "action",
      headerName: "Action",
      description: "This column has a value getter and is not sortable.",
      sortable: false,
      width: 130,
      renderCell: (params) => {
        return (
          <Stack direction="row" spacing={2}>
            <Link to={`/reports/${params.row.id}/edit/`} className="buyNow">
              <Button variant="contained" color="success">
                <Icon>delete</Icon>
                View/Edit
              </Button>
            </Link>
          </Stack>
        );
      },
    },
  ];

  const rows = data.map((row) => {
    const formattedStartShiftTime = new Date(row.startShiftTime).toLocaleString(
      "en-GB",
      {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false,
      }
    );

    const formattedEndShiftTime = new Date(row.endShiftTime).toLocaleString(
      "en-GB",
      {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false,
      }
    );

    return {
      id: row.id,
      referenceNumber: row.referenceNumber,
      names: `${row.employeeFirstName} ${row.employeeSurname}`,
      shift: row.shift,
      startShiftTime: formattedStartShiftTime,
      endShiftTime: formattedEndShiftTime,
      phoneNumber: row.employeePhoneNumber,
      employeeEmail: row.employeeEmail,
      employeeId: row.employeeId,
    };
  });

  return (
    <>
      <Card elevation={3} sx={{ pt: "20px", m: 3 }}>
        <CardHeader>
          <Title>
            Reports Gernerated{" "}
            <span style={{ color: "red", fontSize: "small" }}>
              *(restricted to privilledged users only)
            </span>
          </Title>
        </CardHeader>
        <div style={{ height: 700, width: "100%" }}>
          <DataGrid
            rows={rows}
            columns={columns}
            pageSize={pageSize}
            rowsPerPageOptions={[10, 20, 50]}
            onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}
            checkboxSelection
            pagination
            onCellKeyDown={handleCellKeyDown}
            cellModesModel={cellModesModel}
            onCellModesModelChange={(model) => setCellModesModel(model)}
            components={{
              // Toolbar: EditToolbar,
              Toolbar: GridToolbar,
            }}
            componentsProps={{
              toolbar: {
                cellMode,
                selectedCellParams,
                setSelectedCellParams,
                cellModesModel,
                setCellModesModel,
              },
              cell: {
                onFocus: handleCellFocus,
              },
            }}
            experimentalFeatures={{ newEditingApi: true }}
          />
        </div>
      </Card>
    </>
  );
};

export default ReportsView;
